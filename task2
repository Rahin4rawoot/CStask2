import tkinter as tk
from tkinter import filedialog, messagebox
from PIL import Image, ImageTk
import numpy as np


def load_image(image_path):
    """Load an image from the specified path and convert it to a NumPy array."""
    img = Image.open(image_path)
    img = img.convert("RGB")  
    return np.array(img)

def save_image(image_array, output_path):
    """Save the numpy array as an image to the specified path."""
    img = Image.fromarray(image_array.astype('uint8'))
    img.save(output_path)

def swap_pixels(image_array):
    """Simple pixel swapping encryption."""
    encrypted_image = image_array.copy()
    for i in range(0, encrypted_image.shape[0], 2):
        for j in range(0, encrypted_image.shape[1], 2):
            if i + 1 < encrypted_image.shape[0] and j + 1 < encrypted_image.shape[1]:
                encrypted_image[i, j], encrypted_image[i+1, j+1] = encrypted_image[i+1, j+1], encrypted_image[i, j]
    return encrypted_image

def add_value_to_pixels(image_array, value):
    """Add a constant value to each pixel for encryption."""
    encrypted_image = image_array + value
    encrypted_image = np.clip(encrypted_image, 0, 255)  
    return encrypted_image


class ImageEncryptionTool:
    def __init__(self, root):
        self.root = root
        self.root.title("Image Encryption Tool")
        self.root.geometry("600x400")

        self.image_path = None
        self.image = None

       
        self.create_widgets()

    def create_widgets(self):
      
        self.load_button = tk.Button(self.root, text="Load Image", command=self.load_image)
        self.load_button.pack(pady=10)

        self.swap_button = tk.Button(self.root, text="Swap Pixels", command=self.swap_pixels)
        self.swap_button.pack(pady=10)

        self.add_value_button = tk.Button(self.root, text="Add Value to Pixels", command=self.add_value_to_pixels)
        self.add_value_button.pack(pady=10)

        self.save_button = tk.Button(self.root, text="Save Image", command=self.save_image)
        self.save_button.pack(pady=10)

      
        self.image_label = tk.Label(self.root)
        self.image_label.pack(pady=20)

    def load_image(self):
        self.image_path = filedialog.askopenfilename(filetypes=[("Image Files", "*.jpg;*.png;*.jpeg")])
        if self.image_path:
            self.image = load_image(self.image_path)
            self.display_image(self.image)

    def display_image(self, image_array):
        image = Image.fromarray(image_array.astype('uint8'))
        img_resized = image.resize((300, 300), Image.ANTIALIAS)
        img_tk = ImageTk.PhotoImage(img_resized)
        self.image_label.config(image=img_tk)
        self.image_label.image = img_tk

    def swap_pixels(self):
        if self.image is None:
            messagebox.showwarning("Warning", "Please load an image first!")
            return
        self.image = swap_pixels(self.image)
        self.display_image(self.image)

    def add_value_to_pixels(self):
        if self.image is None:
            messagebox.showwarning("Warning", "Please load an image first!")
            return
        value = tk.simpledialog.askinteger("Input", "Enter a value to add to pixels:", minvalue=-255, maxvalue=255)
        if value is not None:
            self.image = add_value_to_pixels(self.image, value)
            self.display_image(self.image)

    def save_image(self):
        if self.image is None:
            messagebox.showwarning("Warning", "Please load an image first!")
            return
        output_path = filedialog.asksaveasfilename(defaultextension=".png", filetypes=[("PNG Files", "*.png")])
        if output_path:
            save_image(self.image, output_path)
            messagebox.showinfo("Success", "Image saved successfully!")

if __name__ == "__main__":
    root = tk.Tk()
    app = ImageEncryptionTool(root)
    root.mainloop()
